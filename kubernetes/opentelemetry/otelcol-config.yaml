receivers:
  otlp:
    protocols:
      grpc:
  # Dummy receiver that's never used, because a pipeline is required to have one.
  otlp/spanmetrics:
    protocols:
      grpc:
        endpoint: "localhost:12345"
  prometheus:
    config:
      scrape_configs:
        - job_name: 'span_job'
          scrape_interval: 10s
          static_configs:
            - targets: [ "0.0.0.0:8889" ]
        - job_name: 'otelcol'
          scrape_interval: 10s
          static_configs:
            - targets: ['0.0.0.0:8888']
          metric_relabel_configs:
            - source_labels: [ __name__ ]
              regex: '.*grpc_io.*'
              action: drop
exporters:
  otlp:
    endpoint: tempo-eu-west-0.grafana.net:443
    headers:
      authorization: Basic $T_AUTH_BASE64
      content-type: application/json
  prometheus:
    endpoint: "0.0.0.0:8889"
  prometheusremotewrite:
    endpoint: "$AWS_AMP_ENDPOINT"
    auth:
      authenticator: sigv4auth
  prometheusremotewrite/grafanacloud:
    endpoint: "https://prometheus-prod-01-eu-west-0.grafana.net/api/prom/push"
    headers:
      authorization: Basic $M_AUTH_BASE64

processors:
  batch:

  spanmetrics:
    metrics_exporter: prometheus
    latency_histogram_buckets: [100us, 1ms, 2ms, 6ms, 10ms, 100ms, 250ms]
    dimensions:
      - name: http.method
        default: GET
      - name: http.status_code
    dimensions_cache_size: 1000

extensions:
  health_check:
  pprof:
  zpages:
  sigv4auth:
    service: "aps"
    region: "eu-central-1"

service:
  extensions: [pprof, zpages, health_check,sigv4auth]
  pipelines:
    traces:
      receivers: [otlp]
      processors: [spanmetrics,batch]
      exporters: [otlp]

    metrics/spanmetrics:
      receivers: [otlp/spanmetrics]
      exporters: [prometheus]

    metrics:
      receivers: [otlp,prometheus]
      exporters: [prometheusremotewrite/grafanacloud]